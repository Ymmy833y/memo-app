let CACHE_NAME="memo-app-cache-v2",ASSET_MANIFEST="./parcel-manifest.json",CDN_URLS=["https://uicdn.toast.com/editor/latest/toastui-editor.min.css","https://uicdn.toast.com/editor/latest/theme/toastui-editor-dark.min.css","https://uicdn.toast.com/tui-color-picker/latest/tui-color-picker.min.css","https://uicdn.toast.com/editor-plugin-color-syntax/latest/toastui-editor-plugin-color-syntax.min.css","https://cdnjs.cloudflare.com/ajax/libs/prism/1.23.0/themes/prism.min.css","https://uicdn.toast.com/editor-plugin-code-syntax-highlight/latest/toastui-editor-plugin-code-syntax-highlight.min.css"];self.addEventListener("install",e=>{e.waitUntil(fetch("./parcel-manifest.json").then(e=>e.json()).then(e=>{let t=Object.values(e).map(e=>new URL(e,self.location).toString()),s=new URL("./index.html",self.location).toString();t.includes(s)||t.push(s);let o=t.concat(CDN_URLS);return caches.open(CACHE_NAME).then(e=>Promise.all(o.map(t=>"chrome-extension:"===new URL(t).protocol?Promise.resolve():t.startsWith("https://uicdn.toast.com/")?fetch(new Request(t,{mode:"no-cors"})).then(s=>e.put(t,s)).catch(e=>(console.error(`Failed to cache ${t}:`,e),Promise.resolve())):fetch(t).then(s=>e.put(t,s)).catch(e=>(console.error(`Failed to cache ${t}:`,e),Promise.resolve())))))}).catch(e=>{console.error("Failed to load asset manifest:",e)}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(e=>Promise.all(e.filter(e=>e!==CACHE_NAME).map(e=>caches.delete(e)))))}),self.addEventListener("fetch",e=>{let t=new URL(e.request.url);if(!e.request.url.includes("/ws")&&"chrome-extension:"!==t.protocol){if("navigate"===e.request.mode||["document","script","style"].includes(e.request.destination))return void e.respondWith(fetch(e.request).then(t=>{console.log("[SW] Network fetch succeeded for:",e.request.url);let s=t.clone();return caches.open(CACHE_NAME).then(t=>{t.put(e.request,s)}),t}).catch(()=>(console.warn("[SW] Network fetch failed for:",e.request.url,", attempting to serve from cache."),caches.match(e.request).then(t=>t?(console.log("[SW] Serving cached response for:",e.request.url),t):"navigate"===e.request.mode?(console.warn("[SW] No cached response found, serving cached index.html for navigation request."),caches.match(new URL("./index.html",self.location).toString())):(console.error("[SW] No cached response available for:",e.request.url),new Response("",{status:503,statusText:"Service Unavailable",headers:{"Content-Type":"text/plain"}}))))));e.respondWith(caches.match(e.request).then(t=>t?(console.log("[SW] Serving cached response for:",e.request.url),t):fetch(e.request).then(e=>e).catch(()=>(console.error("[SW] Failed to fetch:",e.request.url),new Response("",{status:503,statusText:"Service Unavailable",headers:{"Content-Type":"text/plain"}})))))}});
//# sourceMappingURL=sw.js.map
